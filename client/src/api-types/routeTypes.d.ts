/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/items/": {
    /** Item Set */
    get: operations["ItemSet"];
    /** Item Set */
    post: operations["ItemSet_2"];
  };
  "/api/v1/items/{id}/": {
    /** Item Set */
    get: operations["ItemSet_4"];
    /** Update Item Set */
    put: operations["UpdateItemSet"];
    /** Item Set */
    delete: operations["ItemSet_3"];
    /** Partial Update Item Set */
    patch: operations["PartialUpdateItemSet"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: import("./components/schemas.d.ts").Error;
    Item: import("./components/schemas.d.ts").Item;
    NotFound: import("./components/schemas.d.ts").NotFound;
    PatchedItem: import("./components/schemas.d.ts").PatchedItem;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Item Set */
  ItemSet: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Item"][];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Request Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Item Set */
  ItemSet_2: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Item"];
        "application/x-www-form-urlencoded": components["schemas"]["Item"];
        "multipart/form-data": components["schemas"]["Item"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Item"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            /** @description List of non-field errors */
            ""?: string[];
            [key: string]: string[] | undefined;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Request Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Item Set */
  ItemSet_4: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this item. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Item"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Request Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Resource Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Update Item Set */
  UpdateItemSet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this item. */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Item"];
        "application/x-www-form-urlencoded": components["schemas"]["Item"];
        "multipart/form-data": components["schemas"]["Item"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Item"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            /** @description List of non-field errors */
            ""?: string[];
            [key: string]: string[] | undefined;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Request Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Resource Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Item Set */
  ItemSet_3: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this item. */
        id: number;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Request Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Resource Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  /** Partial Update Item Set */
  PartialUpdateItemSet: {
    parameters: {
      path: {
        /** @description A unique integer value identifying this item. */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedItem"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedItem"];
        "multipart/form-data": components["schemas"]["PatchedItem"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Item"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": {
            /** @description List of non-field errors */
            ""?: string[];
            [key: string]: string[] | undefined;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Request Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Resource Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
}
